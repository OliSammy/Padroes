"""
Aplica√ß√£o principal do Sistema de Cafeteria
Implementa padr√£o MVC com padr√µes GoF
"""
import uvicorn # type: ignore
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session

# Configura√ß√£o do banco
from DAO.config import init_db, get_db
from DAO.seeds import run_seeds

# Autentica√ß√£o JWT
from src.auth_service import get_current_user
from DAO.models import Cliente

# Controllers (padr√£o MVC)
from controllers.carrinho_controller import CarrinhoController
from controllers.pedido_controller import PedidoController
from controllers.personalizacao_controller import PersonalizacaoController
from controllers.bebida_controller import BebidaController
from controllers.dashboard_controller import DashboardController
from controllers.notificacao_controller import NotificacaoController

# Business Objects
from patterns.business_object import PedidoBO, ClienteBO, ProdutoBO


# Configura√ß√£o da aplica√ß√£o principal
app = FastAPI(
    title="Sistema de Cafeteria",
    description="""
    Sistema completo de pedidos personalizados para cafeteria que cont√©m:
    
    Padr√µes GoF Implementados:
    - üé® Decorator: Personaliza√ß√£o de bebidas
    - üëÅÔ∏è Observer: Notifica√ß√µes para cozinha e cliente  
    - üí∞ Strategy: Diferentes tipos de desconto
    - üè≠ Factory Method: Cria√ß√£o de bebidas base
    - ‚ö° Command: Encapsulamento de a√ß√µes do sistema
    - üîÑ State: Gerenciamento de estados do pedido
    
    Padr√µes Arquiteturais:
    - üóÑÔ∏è DAO/Repository: Acesso a dados
    - üíº Business Object: L√≥gica de neg√≥cio
    - üñ•Ô∏è MVC: Separa√ß√£o de responsabilidades
    """,
    version="1.0.0"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inicializar controllers
carrinho_controller = CarrinhoController()
pedido_controller = PedidoController()
personalizacao_controller = PersonalizacaoController()
bebida_controller = BebidaController()
dashboard_controller = DashboardController()
notificacao_controller = NotificacaoController()

# Incluir rotas dos controllers
app.include_router(carrinho_controller.router)
app.include_router(pedido_controller.router)
app.include_router(personalizacao_controller.router)
app.include_router(bebida_controller.router)
app.include_router(dashboard_controller.router)
app.include_router(notificacao_controller.router)

# Incluir rotas de autentica√ß√£o
from src.auth_service import auth_router
app.include_router(auth_router, prefix="/auth", tags=["Autentica√ß√£o"])


@app.on_event("startup")
async def startup_event():
    """Inicializa√ß√£o da aplica√ß√£o"""
    print("üöÄ Iniciando Sistema de Cafeteria...")
    print("üìä Inicializando banco de dados...")
    
    # Inicializar banco
    init_db()
    
    print("‚úÖ Banco de dados inicializado!")
    
    print("üéâ Sistema de Cafeteria iniciado com sucesso!")
    print("üìö Documenta√ß√£o dispon√≠vel em: http://localhost:8000/docs")


@app.get("/")
async def root():
    """Endpoint raiz com informa√ß√µes do sistema"""
    return {
        "message": "üè™ Sistema de Cafeteria - Padr√µes GoF",
        "version": "1.0.0",
        "padroes_implementados": {
            "decorator": "‚úÖ Personaliza√ß√£o de bebidas",
            "observer": "‚úÖ Notifica√ß√µes de pedidos",
            "strategy": "‚úÖ Pol√≠ticas de desconto",
            "factory_method": "‚úÖ Cria√ß√£o de bebidas",
            "command": "‚úÖ Encapsulamento de a√ß√µes",
            "state": "‚úÖ Estados do pedido",
        "dao": "‚úÖ Acesso a dados",
            "business_object": "‚úÖ L√≥gica de neg√≥cio",
            "mvc": "‚úÖ Arquitetura MVC"
        },
        "endpoints": {
            "documentacao": "/docs",
            "auth": "/auth/*",
            "carrinho": "/carrinho/*",
            "pedidos": "/pedidos/*",
            "personalizacoes": "/personalizacoes/*",
        }
    }


@app.get("/health")
async def health_check():
    """Verifica sa√∫de da aplica√ß√£o"""
    return {
        "status": "healthy",
        "database": "connected",
        "patterns": "implemented",
        "timestamp": "2024-12-19T10:00:00Z"
    }


@app.get("/stats")
async def obter_estatisticas_sistema(db: Session = Depends(get_db)):
    """Obt√©m estat√≠sticas gerais do sistema"""
    try:
        pedido_bo = PedidoBO(db)
        produto_bo = ProdutoBO(db)
        
        stats = pedido_bo.obter_estatisticas()
        bebidas = produto_bo.listar_bebidas()
        
        return {
            "sistema": {
                "total_pedidos": stats.get("total_pedidos", 0),
                "pedidos_hoje": stats.get("pedidos_hoje", 0),
                "faturamento_total": stats.get("faturamento_total", 0),
                "pedidos_pendentes": stats.get("pedidos_pendentes", 0),
                "pedidos_em_preparo": stats.get("pedidos_em_preparo", 0)
            },
            "produtos": {
                "total_bebidas": len(bebidas),
                "tipos_disponiveis": len(set(b.tipo.value for b in bebidas))
            },
            "padroes": {
                "decorator_personalizacoes": "Ativo",
                "observer_notificacoes": "Ativo", 
                "strategy_descontos": "Ativo",
                "factory_bebidas": "Ativo",
                "command_acoes": "Ativo",
                "state_pedidos": "Ativo"
            }
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao obter estat√≠sticas: {str(e)}"
        )


@app.get("/demo/decorator")
async def demo_decorator(db: Session = Depends(get_db)):
    """Demonstra√ß√£o do padr√£o Decorator"""
    try:
        from patterns.decorator import Cafe, LeiteDeAveia, Canela, SemAcucar
        
        # Criar bebida base
        cafe = Cafe()
        
        # Aplicar decorators
        cafe_personalizado = LeiteDeAveia(cafe)
        cafe_personalizado = Canela(cafe_personalizado)
        cafe_personalizado = SemAcucar(cafe_personalizado)
        
        return {
            "padrao": "Decorator Pattern",
            "descricao": "Adi√ß√£o din√¢mica de funcionalidades",
            "exemplo": {
                "bebida_base": {
                    "tipo": cafe.get_tipo(),
                    "descricao": cafe.get_descricao(),
                    "preco": cafe.get_preco()
                },
                "bebida_personalizada": {
                    "tipo": cafe_personalizado.get_tipo(),
                    "descricao": cafe_personalizado.get_descricao(),
                    "preco": cafe_personalizado.get_preco()
                }
            },
            "beneficios": [
                "Personaliza√ß√£o flex√≠vel",
                "Combina√ß√µes infinitas",
                "Extensibilidade sem modificar c√≥digo base"
            ]
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro na demonstra√ß√£o: {str(e)}"
        )


if __name__ == "__main__":
    print("üè™ Iniciando Sistema de Cafeteria...")
    print("üìñ Acesse http://localhost:8000/docs para documenta√ß√£o")
    print("üéØ Acesse http://localhost:8000/demo para demonstra√ß√µes")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
